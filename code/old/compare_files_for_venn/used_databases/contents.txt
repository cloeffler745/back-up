This file outlines the code that was used to run analysis. The format is 
> name_of_the_file_with_code.sh
Description of the file and the place it was used. Discussses contents and purpose of the code.

> get_ensembl_1k_files_to_compare.sh
Moves the 1k and ensembl files from their respective directories to ~/scratch/compare/1k_e. The files moved have been pre-matched together and this code creates adirectory to place matched files into. This code will throw 16 errors. The first saying that 0_1k.fasta.gz is not a directory, this error is tied to the file CocheC5_3. The other 15 are thrown because the file names for 15 of the 299 ensembl references called are inncorrect. There is another file that was created for the express purpose of moving these 15 files.

> get_ensembl_1k_files_to_compare_part_2.sh
This moves the 1k file that did not get moved in the previous code. There were two files in that directory, I manually chose the larger of the two. Of the 15 ensembl files that were not moved in the previous code, this script moves 11 of them. Files chosen were double checked (since the file naming scheme for them was slightly different for some reason) with the taxid_ensmble csv file. There are 4 remaining enemble files that remain to be moved. Running this file in ~/scratch/compare/1k_e/files will not throw any errors.

> compare_1k_e.sh
This file runs the blastn command across all the files inside ~/scratch/compare/1k_e/files and also extracts the desired data from the resulting file. These results are put into a text file called blast_results.txt WITHIN EACH DIRECTORY INSIDE files. However, it is not run on the files Picpa1, Trire2, Triru1, or Yarlip1 because the tax id was not a good index for matching 1k and ensembl in these cases.Note that the python script "extract.py" must be inside ~/scratch/compare/1k_e/files for this to work (as this python code extracts the lines of code from the blast results which are relevant, this puts the results in blast_results.txt). I do not know whether or not there are any errors thrown, the code takes to long to run so I put it in the screen and detatch.

> extract.py
This file is used within the script "compare_1k_e.sh". After the blastn is run to compare the files, blast_results is returned with the scores of the comparisons between each pair of contigs/chromosomes. This file pulls the line that outlines the best match for every contig/chromosome found in one of the compared files. The way the comparison in compare_1k_e.sh works is that it takes one of the contigs/chromosomes in the first file and comapres it to everything in the second file. Then the best match appears first in the cluster of lines with that contig/chromosome from first getting compared. The same occurs for all other comparisons. So this code takes the first line from every cluster. These lines are outputted to a text file "get_best_matches.txt". This code is not known to throw errors when implemented properly.

> extract_new.py
This code takes in a blast file, parses it by tabs, takes the best entries from each cluster (as is described and done in the entry above, the code for that was literally copy-pasted into this script), then calculates an adjusted percentage identity by the formula  100 * (((%_id)/100)*alg_len)/max(sub_len, query_len). It replaces the %_identity with this new adjusted value and then  outputs the alterned lines to a text file called "get_best_matches.txt". This code is not known to throw errors when implimented properly. This script is used by the set of scripts (the "compare_" blastn series) within ~/scratch/compare directories. NOTE: we assumed that even after the %_identity numbers were adjusted that the top entry in each cluster was still the best. This code does not re-sort the lines in each cluster. It takes only the top entries from the start and changes one of the values in the line, then prints those results.  
